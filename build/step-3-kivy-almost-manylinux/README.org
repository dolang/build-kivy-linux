# -*- org-confirm-babel-evaluate: nil; -*-
#+STARTUP: indent

* About almost-manylinux
"/Uh what, why does it say almost?/"

According to the manylinux2010 standard ([[https://www.python.org/dev/peps/pep-0571/][PEP 571]]), the produced wheels
have to be compiled against a specific version of =glibc= and may only
have a small set of outside dependencies.  Everything else has to be
included.

The first condition is already met with the manylinux2010 Docker images.

However, the dependencies (backports) are not quite ready yet.  They're
good enough for a build but need to be replaced by the distro's own
binaries.

So once you're done with the binary wheel builds you'll still have to
install the SDL2 dependencies through your package manager before you
can install the wheels.

#+BEGIN_EXAMPLE
  # e.g. Ubuntu 18.04
  sudo apt install -y libsdl2{,-image,-mixer,-ttf}-2.0.0
  
  # e.g. Fedora 27
  sudo dnf install -y SDL2{,_image,_mixer,_ttf}
#+END_EXAMPLE

* Building the Wheels
#+BEGIN_QUOTE
"/Wow, I can't believe it's not manylinux./"

  -- some dude
#+END_QUOTE

- First, copy the backports here, so they're available in the Docker
  container.
- *Note:* only x86_64 versions are included at the moment.
  #+BEGIN_SRC sh  :results drawer
    mkdir -p io
    DEPS="\
        libxkbcommon-0.7.1-1.el6.x86_64.rpm \
        libxkbcommon-devel-0.7.1-1.el6.x86_64.rpm \
        SDL2-2.0.3-9.el6.x86_64.rpm \
        SDL2-devel-2.0.3-9.el6.x86_64.rpm \
        SDL2_image-2.0.1-2.el6.x86_64.rpm \
        SDL2_image-devel-2.0.1-2.el6.x86_64.rpm \
        SDL2_mixer-2.0.1-2.el6.x86_64.rpm \
        SDL2_mixer-devel-2.0.1-2.el6.x86_64.rpm \
        SDL2_ttf-2.0.14-2.el6.x86_64.rpm \
        SDL2_ttf-devel-2.0.14-2.el6.x86_64.rpm"
    
    for DEP in $DEPS; do
        if [ ! -f io/$DEP ]; then
            cp ~/dev2/RPMS/x86_64/$DEP io/
        fi
    done
    ls io
  #+END_SRC

- tangle, ~chmod +x ...~ and run the following script
- this spins up an interactive Docker container:
  #+BEGIN_SRC sh  :tangle docker-run-x86_64.sh
    #!/bin/bash
    # - expects the `${USERNAME}/manylinux2010_x86_64` Docker image to be
    #   present
    # - can have an optional argument which will serve as suffix to the
    #   container name
    set -e -x
    pushd io/
    SUFFIX=$1
    docker run -it -v $(pwd):/io \
        --name almost_manylinux${SUFFIX:+_$SUFFIX} \
        ${USERNAME}/manylinux2010_x86_64 bash
    popd
  #+END_SRC

- *optional:* same as above, but with the i686 docker image, in case you
  need 32 bit wheels (tangle this):
  #+BEGIN_SRC sh  :tangle docker-run-i686.sh
    #!/bin/bash
    # - expects the `${USERNAME}/manylinux2010_i686` Docker image to be
    #   present
    # - can have an optional argument which will serve as suffix to the
    #   container name
    set -e -x
    pushd io/
    SUFFIX=$1
    docker run -it -v $(pwd):/io \
        --name almost_manylinux_32bit${SUFFIX:+_$SUFFIX} \
        ${USERNAME}/manylinux2010_i686 bash
    popd
  #+END_SRC

- tangle, ~chmod +x~ and run *inside the container*
  #+BEGIN_SRC sh  :tangle io/build-kivy-almost-manylinux.sh
    #!/bin/bash
    
    set -x  # not all versions build with all Pythons, don't add -e
    
    pushd /io
    yum localinstall -y \
        libxkbcommon-0.7.1-1.el6.x86_64.rpm \
        libxkbcommon-devel-0.7.1-1.el6.x86_64.rpm \
        SDL2-2.0.3-9.el6.x86_64.rpm \
        SDL2-devel-2.0.3-9.el6.x86_64.rpm \
        SDL2_image-2.0.1-2.el6.x86_64.rpm \
        SDL2_image-devel-2.0.1-2.el6.x86_64.rpm \
        SDL2_mixer-2.0.1-2.el6.x86_64.rpm \
        SDL2_mixer-devel-2.0.1-2.el6.x86_64.rpm \
        SDL2_ttf-2.0.14-2.el6.x86_64.rpm \
        SDL2_ttf-devel-2.0.14-2.el6.x86_64.rpm
    popd
    pushd ~
    git clone https://github.com/kivy/kivy
    pushd kivy
    git archive -o ../kivy-1.10.1.dev0.tar --prefix="kivy-1.10.1.dev0/"  HEAD
    git archive -o ../kivy-1.10.0.tar --prefix="kivy-1.10.0/"  tags/1.10.0
    git archive -o ../kivy-1.9.1.tar --prefix="kivy-1.9.1/"  tags/1.9.1
    popd
    VERSIONS="1.9.1 1.10.0 1.10.1.dev0"
    for V in $VERSIONS; do
        tar xf "kivy-${V}.tar"
    done
    echo Cython==0.23.1 > kivy-1.9.1/dev-requirements.txt
    echo Cython==0.25.2 > kivy-1.10.0/dev-requirements.txt
    echo Cython==0.27.3 > kivy-1.10.1.dev0/dev-requirements.txt
    
    cat <<EOF | tee -a /io/wheel_build.log
    
    
    ========================================================================
          $(date) -- starting Kivy wheel builds
    ========================================================================
    
    EOF
    
    building_wheel () {
    cat <<EOF | tee -a /io/wheel_build.log
    
    ------------------------------------------------------------------------
     Building Kivy v$V wheel with $PIP
    ------------------------------------------------------------------------
    EOF
    }
    
    for V in $VERSIONS; do
        pushd "kivy-${V}"
        for PIP in /opt/python/*/bin/pip; do
            "$PIP" install -Ur dev-requirements.txt
            building_wheel
            "$PIP" wheel . -w /io/wheelhouse | tee -a /io/wheel_build.log
        done
        popd
    done
    
    popd 
  #+END_SRC
  #+BEGIN_SRC sh  :results silent
    chmod +x io/build-kivy-almost-manylinux.sh
  #+END_SRC

- you may want to fix permissions after it's done, e.g.:
  : sudo chown -R $USER:$USER io/wheelhouse

* TODO Running a local package index
- *note:* still need to put this together properly

- if you already have a [[https://www.devpi.net/][devpi]] server running -- let's assume on
  http://localhost:3141 and the [[https://pypi.org/project/devpi/][devpi packacke]] is installed, then follow
  along these scripts:

** devpi
setup devpi client-side (tangle):
#+BEGIN_SRC sh  :tangle setup-devpi.sh
  #!/bin/bash
  # make sure the devpi server is running beforehand
  
  set -e -x
  
  devpi use http://localhost:3141
  # create a user:
  devpi user -c user password=user
  devpi login user --password=user
  # create a new index:
  devpi index -c almost-manylinux bases=root/pypi
  # use the new index:
  devpi use user/almost-manylinux
#+END_SRC

upload wheels (run):
#+BEGIN_SRC sh  :results silent
  # the io/ directory now contains a  wheelhouse/ folder

  pushd io/
  devpi login user --password=user
  devpi use http://localhost:3141/user/almost-manylinux
  devpi upload wheelhouse/Kivy-*
  popd
#+END_SRC

With all that in place, you're able to use pip with your custom package
index using either -i http://...:3141 or --extra-index-url
http://...:3141 (the former will replace PyPI, the latter will use
both).  E.g.:

: pip install --extra-index-url http://my-devpi:3141 --trusted-host my-devpi -U kivy==1.10.1.dev0

** TODO pmpi
[not ready. CentOS 7 doesn't have a py3.5 package]

The Poor Man's Package Index (/pmpi/) is a small Python script which
produces a [[https://www.python.org/dev/peps/pep-0503/][PEP 503]] compatible directory structure and HTML5 index files
from a directory containing wheels.  PEP 503 defines the repository API
of a package index.

That is, if after using /pmpi/ you run a web server from the wheel
directory, you can target it with pip and it'll serve as your private
little package index.

Combined with Python's built-in HTTP server, you can have that up
immediately.  The only requirement is to have py3.5+ installed, because
I haven't bothered to make it more compatible (yet).

[TODO: is py3.5 available from EPEL?]

Tangle and run the following:
#+BEGIN_SRC sh  :tangle run-pmpi.sh
  #!/bin/bash
  
  set -e -x
  
  pushd io/wheelhouse
  python3.5 -m ../../scripts/pmpi
  python3.5 -m http.server
  popd
#+END_SRC
