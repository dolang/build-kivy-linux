# -*- org-confirm-babel-manylinux -*-
#+STARTUP: indent

* About
"/Uh what, why does it say almost?/"

According to the manylinux2010 standard ([[https://www.python.org/dev/peps/pep-0571/][PEP 571]]), the produced wheels
have to be compiled against a specific version of =glibc= and only have
a small set of outside dependencies.

The first condition is already met with the manylinux2010 Docker images.

However, the dependencies (backports) are not quite ready yet.  They're
good enough for a build but need to be replaced by the distro's own
binaries.

So you'll have to install the SDL2 depencies through your package
manager first before you can install the wheels.

#+BEGIN_EXAMPLE
  # e.g. Ubuntu 18.04
  sudo apt install -y libsdl2{,-image,-mixer,-ttf}-2.0.0
  
  # e.g. Fedora 27
  sudo dnf install -y SDL2{,_image,_mixer,_ttf}
#+END_EXAMPLE

* Building the Wheels
#+BEGIN_QUOTE
"/Wow, I can't believe it's not manylinux./"

  -- some dude
#+END_QUOTE

- First, copy the backports here, so they can be made available in the
  Docker container.
  #+BEGIN_SRC sh  :results drawer
    mkdir -p io
    DEPS="\
        libxkbcommon-0.7.1-1.el6.x86_64.rpm \
        libxkbcommon-devel-0.7.1-1.el6.x86_64.rpm \
        SDL2-2.0.3-9.el6.x86_64.rpm \
        SDL2-devel-2.0.3-9.el6.x86_64.rpm \
        SDL2_image-2.0.1-2.el6.x86_64.rpm \
        SDL2_image-devel-2.0.1-2.el6.x86_64.rpm \
        SDL2_mixer-2.0.1-2.el6.x86_64.rpm \
        SDL2_mixer-devel-2.0.1-2.el6.x86_64.rpm \
        SDL2_ttf-2.0.14-2.el6.x86_64.rpm \
        SDL2_ttf-devel-2.0.14-2.el6.x86_64.rpm"
    
    for DEP in $DEPS; do
        if [ ! -f $DEP ]; then
            cp ~/dev2/RPMS/x86_64/$DEP io/
        fi
    done
    ls io
  #+END_SRC

- tangle, ~chmod +x ...~ and run the following script
- this spins up an interactive docker container:
  #+BEGIN_SRC sh  :tangle io/docker-run.sh
    # - expects the `${USERNAME}/manylinux2010_x86_64` Docker image to be
    #   present
    # - can have an optional argument which will serve as suffix to the
    #   container name
    
    pushd io/
    SUFFIX=$1
    docker run -it -v $(pwd):/io \
        --name almost_manylinux${SUFFIX:+_$SUFFIX} \
        ${USERNAME}/manylinux2010_x86_64 bash
    popd
  #+END_SRC

- tangle, ~chmod +x~ and run *inside the container*
  #+BEGIN_SRC sh  :tangle io/build-almost-manylinux.sh
    #!/bin/bash

    set -x

    pushd /io
    yum localinstall -y \
        libxkbcommon-0.7.1-1.el6.x86_64.rpm \
        libxkbcommon-0.7.1-1.el6.x86_64.rpm \
        SDL2-2.0.3-9.el6.x86_64.rpm \
        SDL2-devel-2.0.3-9.el6.x86_64.rpm \
        SDL2_image-2.0.1-2.el6.x86_64.rpm \
        SDL2_image-devel-2.0.1-2.el6.x86_64.rpm \
        SDL2_mixer-2.0.1-2.el6.x86_64.rpm \
        SDL2_mixer-devel-2.0.1-2.el6.x86_64.rpm \
        SDL2_ttf-2.0.14-2.el6.x86_64.rpm \
        SDL2_ttf-devel-2.0.14-2.el6.x86_64.rpm
    popd
    pushd ~
    git clone https://github.com/kivy/kivy
    pushd kivy
    git archive -o ../kivy-1.10.1.dev0.tar --prefix="kivy-1.10.1.dev0/"  HEAD
    git archive -o ../kivy-1.10.0.tar --prefix="kivy-1.10.0/"  tags/1.10.0
    git archive -o ../kivy-1.9.1.tar --prefix="kivy-1.9.1/"  tags/1.9.1
    popd
    VERSIONS="1.9.1 1.10.0 1.10.1.dev0"
    for V in $VERSIONS; do
        tar xf "kivy-${V}.tar"
    done
    echo Cython==0.23.1 > 1.9.1/dev-requirements.txt
    echo Cython==0.25.2 > 1.10.0/dev-requirements.txt
    echo Cython==0.27.3 > 1.10.1.dev0/dev-requirements.txt
    for V in $VERSIONS; do
        pushd "kivy-${V}"
        for PIP in /opt/python/*/bin/pip; do
            "$PIP" install -Ur dev-requirements.txt
            echo ------------------------------------------------------------------------
            echo Building Kivy v$V wheel with \'$PIP\'
            echo ------------------------------------------------------------------------
            "$PIP" wheel . -w /io/wheelhouse | tee >> /io/wheel_build.log
        done
        popd
    done

    popd 
  #+END_SRC

- you may want to fix permissions after it's done, e.g.:
  : sudo chown -R $USER:$USER io/wheelhouse

* TODO Running a local package index
- *note:* still need to put this together properly

- if you already have a [[https://www.devpi.net/][devpi]] server running -- let's assume on
  http://localhost:3141 and the [[https://pypi.org/project/devpi/][devpi packacke]] is installed, then follow
  along these scripts:

** devpi
setup devpi client-side (tangle):
#+BEGIN_SRC sh  :tangle setup-devpi.sh
  #!/bin/bash
  # make sure the devpi server is running beforehand
  
  set -e -x
  
  devpi use http://localhost:3141
  # create a user:
  devpi user -c user password=user
  devpi login user --password=user
  # create a new index:
  devpi index -c almost-manylinux bases=root/pypi
  # use the new index:
  devpi use user/almost-manylinux
#+END_SRC

upload wheels (run):
#+BEGIN_SRC sh  :results silent
  # the io/ directory now contains a  wheelhouse/ folder

  pushd io/
  devpi login user --password=user
  devpi use http://localhost:3141/user/almost-manylinux
  devpi upload wheelhouse/Kivy-*
  popd
#+END_SRC

With all that in place, you're able to use pip with your custom package
index using either -i http://...:3141 or --extra-index-url
http://...:3141 (the former will replace PyPI, the latter will use
both).  E.g.:

: pip install --extra-index-url http://my-devpi:3141 --trusted-host my-devpi -U kivy==1.10.1.dev0
